import asyncio
from aiogram import Router, F, types, Bot
from aiogram.types import Message, FSInputFile, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.enums import ChatAction
import os
from aiogram.fsm.context import FSMContext
import uuid
import contextlib
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.enums import ContentType
from states import Chat, Images
import keyboards as kb
from generategpt import GPT_text, GPT_vision
from datetime import datetime
from db import (
    AsyncSessionLocal, get_or_create_user,
    ensure_access_with_wallet_daily, get_balance, credit_balance,
    is_subscription_active,
    reward_referrer_on_first_paid,
    ensure_access_with_wallet_daily,
    DAILY_PRICE_KOP, MONTH_PRICE_RUB, set_inviter_if_first)

router = Router()

async def push_state(state: FSMContext, new_state):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π state –≤ —Å—Ç–µ–∫, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –Ω–æ–≤—ã–π
    cur = await state.get_state()
    data = await state.get_data()
    stack = data.get('state_stack', [])
    if cur:
        stack.append(cur)
        await state.update_data(state_stack=stack)
    await state.set_state(new_state)

async def pop_state(state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π state, –µ—Å–ª–∏ –æ–Ω –±—ã–ª; –∏–Ω–∞—á–µ —á–∏—Å—Ç–∏–º
    data = await state.get_data()
    stack = data.get('state_stack', [])
    if stack:
        prev = stack.pop()
        await state.update_data(state_stack=stack)
        await state.set_state(prev)
        return prev
    await state.clear()
    return None

@router.message(Images.photo, F.photo)
async def photo_received(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∫–ª–∞–¥—ë–º –ø—É—Ç—å –≤ FSM
    file_name = f"{uuid.uuid4()}.jpg"
    await message.bot.download(message.photo[-1], destination=file_name)
    await state.update_data(photo_path=file_name)

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –¥–æ–ø.–¥–∞–Ω–Ω—ã–µ
    await state.set_state(Images.meta)
    await message.answer(
        "–ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –∏ –≥—Ä–∞–º–º–æ–≤–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=kb.photo_extra)

@router.message(Images.wait)
async def wait_wait(message: Message):
    await message.answer('–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

@router.message(Chat.wait)
async def wait_wait(message: Message):
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

@router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, state: FSMContext):
    # —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä—è—Ç—å
    await state.clear()
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç–∫—Ä–∞–Ω "–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        reply_markup=kb.inline_main
    )


@router.callback_query(F.data == 'guide')
async def guide(callback: CallbackQuery):
    text = (
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1Ô∏è‚É£  –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ (–ø–æ–¥—Å—á—ë—Ç –ö–ë–ñ–£)\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∏ –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n\n"
        "2Ô∏è‚É£  –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\n"
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–∏—Ç–∞–Ω–∏–µ, –¥–∏–µ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à—Ü?\n"
        "- –ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ª—É—á—à–µ –≤–∫–ª—é—á–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?\n"
        "- –ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?\n\n"
        "‚ùå –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ –ø–æ–ª–∏—Ç–∏–∫—É –∏–ª–∏ –ø–æ–≥–æ–¥—É), –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç, "
        "—á—Ç–æ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –ø–∏—Ç–∞–Ω–∏—é –∏ –ó–û–ñ.\n\n"
        "3Ô∏è‚É£  –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª\n"
        "–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    await callback.message.edit_text(text, reply_markup=kb.menu_return)

# –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É (3 –∫–Ω–æ–ø–∫–∏)
@router.callback_query(F.data == 'use_bot')
async def use_bot(cb: CallbackQuery):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=kb.inline_main)

# –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∫–æ–ª–ª–±—ç–∫)
@router.callback_query(F.data == 'support')
async def support(cb: CallbackQuery):
    await cb.message.edit_text(
        "üõü –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_support_username\n"
        "Email: support@example.com\n\n"
        "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        reply_markup=kb.pay_actions
    )

@router.message(Chat.text)
async def chat_response(message: Message, state: FSMContext):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await state.set_state(Chat.wait)
    resp = await GPT_text(message.text)
    await message.answer(resp, reply_markup=kb.inline_main)
    await state.clear()


@router.callback_query(F.data == 'skip_photo_meta')
async def skip_photo_meta(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    file_name = data.get("photo_path")
    await cb.message.bot.send_chat_action(chat_id=cb.from_user.id, action=ChatAction.TYPING)
    await cb.message.edit_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ‚Ä¶ ‚è≥")
    try:
        await state.set_state(Images.wait)
        resp = await GPT_vision(file_name, extra_text=None)
        await cb.message.edit_text(resp, reply_markup=kb.inline_main)
    finally:
        with contextlib.suppress(Exception):
            os.remove(file_name)
        await state.clear()

@router.message(Images.meta, F.text)
async def photo_with_meta(message: Message, state: FSMContext):
    data = await state.get_data()
    file_name = data.get("photo_path")
    user_extra = message.text.strip()
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)

    status_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö‚Ä¶ ‚è≥")
    try:
        await state.set_state(Images.wait)
        resp = await GPT_vision(file_name, extra_text=user_extra)
        await status_msg.edit_text(resp, reply_markup=kb.inline_main)
    finally:
        with contextlib.suppress(Exception):
            os.remove(file_name)
        await state.clear()


async def _status_line(tg_id: int) -> str:
    today = datetime.utcnow().strftime("%Y-%m-%d")
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, tg_id)
        paid_today = (user.last_charge_date == today)
        sub_active = await is_subscription_active(session, tg_id)
        bal = await get_balance(session, tg_id)
    need_rub = (DAILY_PRICE_KOP + 99) // 100  # 3 ‚ÇΩ –ø—Ä–∏ DAILY_PRICE_KOP=300
    allowed = sub_active or paid_today or (bal >= need_rub)
    return "üü¢ –î–æ—Å—Ç—É–ø: –æ–ø–ª–∞—á–µ–Ω" if allowed else "üî¥ –î–æ—Å—Ç—É–ø –Ω–µ –æ–ø–ª–∞—á–µ–Ω"

@router.callback_query(F.data == 'menu')
async def show_main_menu(cb: CallbackQuery):
    status_block = await _status_line(cb.from_user.id)
    text = (
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"{status_block}\n\n"
        "üí≥ –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –∫–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∞¬ª¬ª\n"
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚Üí –∫–Ω–æ–ø–∫–∞ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª"
    )
    await cb.message.edit_text(text, reply_markup=kb.inline_menu)

@router.pre_checkout_query()
async def process_pre_checkout(pre: PreCheckoutQuery, bot: Bot):
    # –¢—É—Ç –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ payload/—Ü–µ–Ω—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏.
    await bot.answer_pre_checkout_query(pre.id, ok=True)

from aiogram.filters.command import CommandObject

@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject | None = None):
    # 1) –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –¥–∏–ø-—Å—Å—ã–ª–∫—É /start ref_<tgid>
    try:
        arg = (command.args or "").strip() if command else ""
        if arg.startswith("ref_"):
            inviter_tg = int(arg.replace("ref_", "").strip())
            async with AsyncSessionLocal() as session:
                await set_inviter_if_first(session, invitee_tg=message.from_user.id, inviter_tg=inviter_tg)
    except Exception:
        pass

    # 2) –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–≤–æ–π –∫–æ–¥
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await asyncio.sleep(0.2)

    user_name = message.from_user.first_name
    status_block = await _status_line(message.from_user.id)

    await message.answer(
        f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã 
–Ø –º–æ–≥—É: 
- –ü–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
- –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é 
- –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ —Ñ–∏—Ç–Ω–µ—Å—É
- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç

{status_block}

üí≥ –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –∫–Ω–æ–ø–∫–∞ ¬´–û–ø–ª–∞—Ç–∞¬ª
‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚Üí –∫–Ω–æ–ø–∫–∞ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª
‚ñ∂Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º¬ª
""",
        reply_markup=kb.inline_menu
    )

@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: Message):
    sp = message.successful_payment
    payload = sp.invoice_payload or ""
    total_rub = (sp.total_amount or 0) // 100
    tg_id = message.from_user.id

    # —Ç—É—Ç —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    if payload.startswith("topup_"):
        async with AsyncSessionLocal() as session:
            # –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            new_balance = await credit_balance(session, tg_id, total_rub)
            # —Ä–∞–∑–¥–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª-–±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ ‚Äî –ª–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏)
            await reward_referrer_on_first_paid(session, invitee_tg=tg_id)

        await message.answer(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n"
            f"–ó–∞—á–∏—Å–ª–µ–Ω–æ: {total_rub} ‚ÇΩ\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚ÇΩ", reply_markup=kb.pay_result_kb
        )
    else:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        async with AsyncSessionLocal() as session:
            bal = await get_balance(session, tg_id)
        await message.answer(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω. –ë–∞–ª–∞–Ω—Å: {bal} ‚ÇΩ")

        status_line = await _status_line(tg_id)
        await message.answer(
            f"üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n{status_line}",
            reply_markup=kb.inline_menu
        )

@router.callback_query(F.data == 'referrals')
async def referrals(cb: CallbackQuery):
    my_tg = cb.from_user.id
    me = await cb.message.bot.get_me()
    link = f"https://t.me/{me.username}?start=ref_{my_tg}"

    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, my_tg)
        balance = user.balance_rub or 0

    await cb.message.edit_text(
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        f"–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ, –∫—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +50 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ",
        reply_markup=kb.ref_menu
    )

@router.callback_query(F.data == 'assistant')
async def assistant(callback: CallbackQuery, state: FSMContext):
    status = await ensure_access_with_wallet_daily(callback.from_user.id)
    if not status["allowed"]:
        await callback.message.edit_text(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 100 ‚ÇΩ (–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∞¬ª), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=kb.pay_actions
        )
        return
    await push_state(state, Chat.text)
    await callback.message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ, –¥–∏–µ—Ç—É –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üëá', reply_markup=kb.back_main)

@router.callback_query(F.data == 'upload_photo')
async def upload_photo(callback: CallbackQuery, state: FSMContext):
    status = await ensure_access_with_wallet_daily(callback.from_user.id)
    if not status["allowed"]:
        await callback.message.edit_text(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 100 ‚ÇΩ (–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∞¬ª), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=kb.pay_actions
        )
        return
    await state.set_state(Images.photo)
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞, —è –ø–æ—Å—á–∏—Ç–∞—é –ö–ë–ñ–£.', reply_markup=kb.back_main)

@router.callback_query(F.data == 'sub_buy')
async def sub_buy(cb: CallbackQuery):
    async with AsyncSessionLocal() as session:
        bal = await get_balance(session, cb.from_user.id)

    daily_rub = DAILY_PRICE_KOP / 100
    text = (
        "üí≥ –û–ø–ª–∞—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bal} ‚ÇΩ\n\n"
        "–ü–ª–∞–Ω: 1 –º–µ—Å—è—Ü –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {os.getenv('SUB_PRICE_RUB', '100')} ‚ÇΩ –≤ –º–µ—Å—è—Ü.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    )
    await cb.message.edit_text(text, reply_markup=kb.pay_actions)  # pay_actions —Ç–µ–ø–µ—Ä—å —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å 100 ‚ÇΩ¬ª

@router.callback_query(F.data == 'topup_100')
async def topup_100(cb: CallbackQuery):
    prices = [LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", amount=100 * 100)]
    await cb.message.answer_invoice(
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        description="–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ 100 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞",
        payload=f"topup_{cb.from_user.id}",
        provider_token=os.getenv("PAYMENT_PROVIDER_TOKEN", ""),
        currency="RUB",
        prices=prices,
        need_name=False, need_phone_number=False, need_email=False,
        need_shipping_address=False, is_flexible=False
    )

@router.callback_query(F.data == 'pay_now')
async def pay_now(cb: CallbackQuery):
    amount_rub = int(os.getenv("SUB_PRICE_RUB", "100"))
    prices = [LabeledPrice(label="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (30 –¥–Ω–µ–π)", amount=amount_rub * 100)]
    await cb.message.answer_invoice(
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        description="–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        payload=f"sub_month_{cb.from_user.id}",
        provider_token=os.getenv("PAYMENT_PROVIDER_TOKEN", ""),
        currency="RUB",
        prices=prices,
        need_name=False, need_phone_number=False, need_email=False,
        need_shipping_address=False, is_flexible=False
    )
