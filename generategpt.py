from openai import AsyncOpenAI, DefaultHttpxClient
import httpx
import base64
import aiofiles

import os
from dotenv import load_dotenv


load_dotenv()

PROXY = os.getenv("HTTP_PROXY")
API_KEY = os.getenv("GPT_TOKEN")

http_client = httpx.AsyncClient(proxy=PROXY) if PROXY else httpx.AsyncClient()

client = AsyncOpenAI(
    api_key=API_KEY,
    http_client=http_client,
)

INSTRUCTIONS = '''
Ты — виртуальный фитнес-ассистент. Твоя задача — помогать пользователю с вопросами про:

тренировки (силовые, кардио, техника упражнений, планы тренировок),

питание и диету (рацион, режим питания, баланс БЖУ, примеры блюд),

здоровый образ жизни (сон, восстановление, привычки).

Правила работы:

Если вопрос относится к этим темам — дай полезный, структурированный и понятный ответ.

Можно предлагать упражнения, примеры рационов, рекомендации.

Допустимо приводить общие советы по здоровью, но избегай медицинской диагностики и назначения лекарств.

Если вопрос не по теме — не отвечай напрямую, а вежливо напиши:

«Я отвечаю только на вопросы про тренировки, питание и здоровый образ жизни. Например:
– Как составить план тренировок для набора мышц?
– Какие продукты богаты белком?
– Как правильно распределить приёмы пищи в течение дня?»

Отвечай простым языком, добавляй эмодзи для дружелюбности (по желанию).

Не задавай вопросы и наводящие вопросы, только ответ.

Если запрос слишком общий («Составь мне диету»), уточни у пользователя детали: цель (похудение, набор массы, поддержание формы), ограничения, предпочтения.
'''

async def GPT_text(user_text: str) -> str:
    try:
        resp = await client.responses.create(
            model="gpt-5-nano",
            reasoning={"effort": "low"},
            instructions=INSTRUCTIONS,
            input=user_text,
        )
        return (resp.output_text or "").strip()
    except Exception as e:
        # Тут можно логировать e, но пользователю отдать мягкую ошибку
        return "Упс, не получилось сгенерировать ответ. Попробуйте ещё раз."

async def close_gpt_client():
    await http_client.aclose()

async def GPT_vision(image_path: str, extra_text: str | None = None) -> str:
    try:
        async with aiofiles.open(image_path, "rb") as f:
            raw = await f.read()
        base64_image = base64.b64encode(raw).decode("utf-8")

        user_hint = "Расчитай по инструкции"
        if extra_text:
            user_hint = (
                "Расчитай по инструкции. "
                "Если указаны состав/ингредиенты и граммовка, СЧИТАЙ ИХ ПРИОРИТЕТНЫМИ (важнее визуальной оценки). "
                f"Доп. данные от пользователя:\n{extra_text.strip()}"
            )

        response = await client.responses.create(
            model="gpt-5-nano",
            reasoning={"effort": "low"},
            instructions='''
            Ты — эксперт по питанию. Я пришлю фотографию еды, на ней может быть одно или несколько блюд.
Твоя задача — дать оценку для каждого блюда отдельно, если блюд несколько, а если на фото только одна тарелка 
с одним основным блюдом (даже если в нём есть гарнир и салат), то оценивай всё это как одно блюдо.

Формат ответа должен быть таким:

Блюдо: <название или описание>
Примерный вес блюда (г): XXX 
Калории (ккал): XXX
Белки (г): XXX
Жиры (г): XXX
Углеводы (г): XXX

Правила:

Если на фото одно основное блюдо на одной тарелке (даже если есть гарнир/салат) — используй формат «Блюдо: …», 
НЕ ИСПОЛЬЗУЙ «Итог».

Если блюд два или больше (например, несколько разных тарелок или порций) — используй формат «Блюдо 1», «Блюдо 2» 
и т. д., а в конце общий итог. 
Итог:
Калории: XXX
Белки (г): XXX 
Жиры (г): XXX 
Углеводы (г): XXX 

Всегда указывай все 6 строк для каждого блюда, даже если данные приблизительные.
        ''',
            input=[
                {
                    "role": "user",
                    "content": [
                        {"type": "input_text", "text": user_hint},
                        {"type": "input_image", "image_url": f"data:image/jpeg;base64,{base64_image}"},
                    ],
                }
            ],
        )
        return (response.output_text or "").strip()
    except Exception as e:
        return f"Ошибка обработки изображения: {e}"